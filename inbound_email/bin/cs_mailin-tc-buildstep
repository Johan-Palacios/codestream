#!/usr/bin/env python3

#desc# Standard interface to CodeStream's TeamCity build process for the VS Code Extension

import os
import sys

sys.path.append(os.environ['DT_TOP'] + "/lib")
import devTools
from sysUtils import dumpDict, shellExecNoBuffer, someValueOrNone
from buildUtils import *

assetExtensionList = ['info', 'tgz']
publishDir = "inbound-email"

args = parseStandardBuildArgs()
dt = devTools.devTools()
buildData = buildInit(__file__, dt, args)
os.chdir(buildData['sandboxTop'])
if args.verbose: print("current directory is", buildData['sandboxTop'])

if args.action == 'prep':
	buildstepPrep(args)
	exit(0)

if args.action in ['clean','destroy']:
	buildstepGeneric(args, cmd = "npm run clean")

if args.action == 'destroy':
	buildstepDestroy(args, buildData)

if args.action == 'build':
	print("there's nothing to build")

pkgInfo = None
tarballAssetName = None
infoFileName = None
if args.action in ['pack','info']:
	# create asset info file (w/o md5sum)
	pkgInfo = getPackageInfo(buildData = buildData, gitRepoCommitDir = buildData['sandboxTop'])
	tarballAssetName = pkgInfo['localAssetFilePrefix'] + ".tgz"
	infoFileName = pkgInfo['localAssetFilePrefix'] + ".info"
	pkgInfo['assetsMD5'][tarballAssetName] = "0"
	pkgInfo['sandboxType'] = buildData['sbInfo']['sb_type']
	dumpDict(pkgInfo, publishDir + ".info")

if args.action == 'pack':
	buildstepGeneric(args, cmd = "npm run tarball")
	pkgInfo['assetsMD5'][tarballAssetName] = dt.md5Hash(publishDir + ".tgz")
	dumpDict(pkgInfo, publishDir + ".info")
	os.rename(publishDir + ".info", infoFileName)
	os.rename(publishDir + ".tgz", tarballAssetName)
	if args.verbose:
		dumpDict(pkgInfo, None, "packageInfo:")
		shellExecNoBuffer("ls -l " + pkgInfo['localAssetFilePrefix'] + ".*", printCmd = True)

if args.action == 'citest':
	buildstepGeneric(args, cmd = "npm run test:ci")

if args.action == 'publish':
	publishArtifacts(args, buildData, assetExtensionList, publishDir = publishDir)

if args.action == 'release':
	if os.environ['CS_MAILIN_ASSET_ENV'] != "prod":
		print("release can only be run in a sandbox configured for production")
		exit(1)
	setArtifactLinks("prod/" + publishDir, args.build_number, assetExtensionList, 'current')
	infoFileName = args.build_number + ".info"
	pkgInfo = readJsonFileIgnoreComments(infoFileName)
	applyTagToRepos(os.environ['CS_MAILIN_SANDBOX'], "v" + pkgInfo['version'], pkgInfo['repoCommitId'])
	updatePackageVersion(buildData['sandboxTop'] + "/package.json", "development", pkgInfo['version'], bumpLevel = 'patch')
	buildstepGeneric(args, cmd = "dt-set-asset-version -D prod/inbound-email --tag current --build " + args.build_number)
