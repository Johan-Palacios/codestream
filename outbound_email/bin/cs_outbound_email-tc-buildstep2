#!/usr/bin/env python3

# desc# Standard interface to CodeStream's build process

# https://github.com/TeamCodeStream/teamcity_tools/blob/master/README.md#Structured_Builds

import os
import sys

sys.path.append(os.environ['DT_TOP'] + "/lib")
import sysUtils as su
import buildUtils

# 1. add filename extensions for all assets created (tgz, vsix, zip, ...)
assetExtensionList = ['zip']

# 2. add any additional repos to be included (do not include primary repo)
additionalRepos = []

# 3. choose the build type (npm, intellijPlugin, custom)
buildType = buildUtils.buildType.npm

args = buildUtils.parseStandardBuildArgs()
buildOptions = {
	'verbose': args.verbose,
	'assetExtensionList': assetExtensionList,
	'additionalRepos': additionalRepos,
	'buildDirectory': "src"
}

# 4. Set this if you want your applied git tags to be something other than 'v' (v1.2.3)
# buildOptions['gitTagPrefix'] = "mytag-"

if args.verbose:
	print("buildstep running with", args.action)

build = buildUtils.build(buildType, **buildOptions)
if not build:
	su.printErr("could not get a build object")
	exit(1)

# 5. Make sure the default actions apply, if not make changes as necessary.
#    Use 'build.execCmd("command string")' to execute custom actions.
#    https://github.com/TeamCodeStream/teamcity_tools/blob/master/README.project-build-types.md
if args.action == 'prep':
	build.prep()                              # set teamcity variables / parameters
elif args.action == 'build':
	# build.build()                             # complete build so services can be started
	print("there is nothing to build")
elif args.action == 'citest':
	# build.citest()                            # run the continuous integration test suite
	print("testing not configured")
elif args.action == 'pack':
	# build.pack()                              # create asset info file and package assets
	buildName = build.getDisplayVersion("name")          # outbound-email
	fullName = build.getDisplayVersion("full")           # [prefix-]outbound-email-1.2.3+1000
	build.execCmd("npm run build")
	os.rename(f"../out/{buildName}.zip", f"{fullName}.zip")
	build.getMD5SumsForAssets()
	build.writeAssetInfo()
elif args.action == 'publish':
	# build.publish()                           # publish assets for distribution
	print("nothing to publish yet")
elif args.action == 'tag':
	build.tag()                               # update version info and apply tags
elif args.action == 'release':
	build.release()                           # release assets to the general public
elif args.action == 'awsLambda':
	# create a lambda function definition for the currently loaded environment
	build.awsLambda(lambdaConfig='../out/')
	# buildName = build.getDisplayVersion("name")          # outbound-email
	# fullName = build.getDisplayVersion("full")           # [prefix-]outbound-email-1.2.3+1000
	# build.execCmd("npm run lambda:config")
	# os.rename(f"../out/{buildName}.lambda.json", f"{fullName}.lambda.json")
	# build.setAssetInfoProperty('runTimeEnvironment', os.environ['CS_OUTBOUND_EMAIL_ENV'])
	# build.addAssetToAssetInfo(f"{fullName}.lambda.json")
	# build.writeAssetInfo()
elif args.action == 'update':
	build.update()                            # update existing asset to create a new one
elif args.action == 'docker':
	build.docker()                            # create docker containers
else:
	su.printErr("invalid build args")
	exit(1)

exit(0)
