// handle the "POST /no-auth/provider-token" request to handle result of a user auth through a third-party provider

'use strict';

const RestfulRequest = require(process.env.CS_API_TOP + '/lib/util/restful/restful_request.js');
const AuthenticatorErrors = require(process.env.CS_API_TOP + '/modules/authenticator/errors');
const Errors = require('./errors');
const ModelSaver = require(process.env.CS_API_TOP + '/lib/util/restful/model_saver');

class ProviderTokenRequest extends RestfulRequest {

	constructor (options) {
		super(options);
		this.errorHandler.add(Errors);
		this.errorHandler.add(AuthenticatorErrors);
	}

	async authorize () {
		// no authorization necessary, authorization is handled by the processing logic
	}

	// process the request...
	async process () {
		this.provider = this.request.params.provider.toLowerCase();
		await this.requireAndAllow();		// require certain parameters, discard unknown parameters
		if (!this.request.query.token) {
			// special allowance for token in the fragment, which we can't access,
			// so send a client script that can 
			return await this.extractTokenFromFragment();
		}
		await this.validateState();			// decode the state token and validate
		await this.getUser();				// get the user initiating the auth request
		await this.getTeam();				// get the team the user is authed with
		await this.saveToken();				// save the provided token
		await this.sendResponse();			// send the response html
	}

	// require certain parameters, discard unknown parameters
	async requireAndAllow () {
		await this.requireAllowParameters(
			'query',
			{
				required: {
					string: ['state']
				},
				optional: {
					string: ['token']
				}
			}
		);
	}

	// special allowance for token in the fragment, which we can't access,
	// so send a client script that can 
	async extractTokenFromFragment () {
		this.response.type('text/html');
		const host = `${this.api.config.api.host}:${this.api.config.express.port}`;
		this.response.send(`
<script>
	var hash = window.location.hash.substr(1);
	var hashObject = hash.split('&').reduce(function (result, item) {
		var parts = item.split('=');
		result[parts[0]] = parts[1];
		return result;
	}, {});
	const token = hashObject.token || '';
	document.location.href = "https://${host}/no-auth/provider-token/${this.provider}?state=${this.request.query.state}&token=" + token;
</script>
		`);
		this.responseHandled = true;
	}

	// decode the state token and validate
	async validateState () {
		const stateToken = this.request.query.state;
		let payload;
		try {
			payload = this.api.services.tokenHandler.verify(stateToken);
		}
		catch (error) {
			const message = typeof error === 'object' ? error.message : error;
			if (message === 'jwt expired') {
				throw this.errorHandler.error('tokenExpired');
			}
			else {
				throw this.errorHandler.error('tokenInvalid', { reason: message });
			}
		}
		if (payload.type !== 'pauth') {
			throw this.errorHandler.error('tokenInvalid', { reason: 'not a provider authorization token' });
		}
		this.userId = payload.userId;
		this.teamId = payload.teamId;
	}

	// get the user initiating the auth request
	async getUser () {
		this.user = await this.data.users.getById(this.userId);
		if (!this.user) {
			throw this.errorHandler.error('notFound', { info: 'user' });
		}
	}

	// get the team the user is authed with
	async getTeam () {
		if (!this.user.hasTeam(this.teamId)) {
			throw this.errorHandler.error('updateAuth', { reason: 'user is not on the indicated team' });			
		}
		this.team = await this.data.teams.getById(this.teamId);
		if (!this.team) {
			throw this.errorHandler.error('notFound', { info: 'team' });
		}
	}

	// save the provided token for the user
	async saveToken () {
		const op = {
			$set: {
				[`providerInfo.${this.team.id}.${this.provider}`]: {
					accessToken: this.request.query.token
				}
			}
		};

		this.transforms.userUpdate = await new ModelSaver({
			request: this,
			collection: this.data.users,
			id: this.user.id
		}).save(op);
	}

	// send the response html
	async sendResponse () {
		this.response.type('text/html');
		this.response.send(`
<html>
<head>
	<meta charset="utf-8" />
	<title>CodeStream - The knowledge base behind your codebase.</title>
	<style>
	@import url(
		https://fonts.googleapis.com/css?family=Rubik:300,
		400,
		500,
		700
	);
	@charset "UTF-8";
	body {
		background-color: #2e333c;
		font-family: Rubik;
	}
	h1 {
		color: white;
		font-size: 36px;
		font-weight: normal;
		text-align: center;
	}
	.codestream-logo {
		width: 198px;
		height: 30px;
		display: inline;
		vertical-align: -5px;
	}
	.trello-logo {
		width: 98px;
		height: 30px;
		display: inline;
		vertical-align: -4px;
	}
	.rocket {
		vertical-align: -4px;
	}
	.plus {
		display: inline-block;
		padding: 0 5px 0 10px;
	}
	.equals {
		display: inline-block;
		padding: 0 10px 0 10px;
	}
	.box {
		box-sizing: border-box;
		border: 1px solid #1b1b1b;
		box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
		padding: 10px 30px;
		width: 560px;
		margin: 100px auto 60px auto;
		position: relative;
		color: rgba(255, 255, 255, 0.75);
	}
	.box::after {
		content: "";
		display: block;
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.2);
	}
	.youtube {
		width: 560px;
		box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
		border: 1px solid #1b1b1b;
		margin: 0 auto;
	}
	</style>
</head>
<body>
	<div class="logo"><a href="https://codestream.com/"> </a></div>
	<div class="box">
	<h1>
		<svg version="1.1" viewBox="0 0 198 30" class="codestream-logo">
		<title>CodeStream Logo</title>
		<defs>
			<path
			id="e"
			d="m0.062747 4.8112c0 2.6441 2.1751 4.7874 4.8581 4.7874s4.8581-2.1433 4.8581-4.7874c0-2.644-2.1751-4.7873-4.8581-4.7873s-4.8581 2.1433-4.8581 4.7873z"
			></path>
			<path
			id="d"
			d="m0.19628 0.20296c-0.11325 0.10468-0.17745 0.25082-0.17745 0.40374v5.7041c3.7259 0.85058 6.5027 4.1417 6.5027 8.0719 0 3.9303-2.7769 7.2214-6.5027 8.072v5.8168c0 0.30591 0.25175 0.55402 0.56235 0.55402 0.15534 0 0.30379-0.063308 0.41015-0.17492l12.197-12.797c0.75794-0.79519 0.75794-2.0337 0-2.8289l-12.197-12.797c-0.1108-0.11614-0.26025-0.17485-0.41023-0.17485-0.13797 7.5366e-5 -0.27632 0.049742-0.38482 0.15013z"
			></path>
			<path
			id="c"
			d="m12.766 0.22753l-12.197 12.797c-0.75794 0.79519-0.75794 2.0337 0 2.8289l12.197 12.797c0.10636 0.11162 0.25474 0.17492 0.41007 0.17492 0.31067 0 0.56235-0.24811 0.56235-0.55402v-5.8168c-3.7258-0.85058-6.5027-4.1417-6.5027-8.072 0-3.9302 2.7769-7.2214 6.5027-8.0719v-5.704c0-0.15299-0.064201-0.29913-0.17738-0.40389-0.10858-0.10031-0.24686-0.14998-0.3849-0.15005-0.1499 0-0.2995 0.05871-0.41015 0.17485z"
			></path>
			<path
			id="b"
			d="m43.659 0.0055771v8.1254c-1.0271-1.1578-2.3284-1.7369-3.9042-1.7369-1.9648 0-3.5132 0.73587-4.6448 2.2082-1.132 1.4719-1.6984 3.4494-1.6984 5.9321 0 2.63 0.5762 4.6838 1.728 6.1608 1.1518 1.4769 2.6804 2.2152 4.5852 2.2152 1.6952 0 3.0816-0.66239 4.1588-1.9873l0.20928 1.6927h3.9046v-22.61h-4.3385zm-5.131 18.268c-0.52845-0.79504-0.79298-1.9381-0.79298-3.4299 0-3.3267 1.0421-4.9902 3.1269-4.9902 1.3263 0 2.2588 0.55469 2.7971 1.6635v6.2854c-0.54819 1.1092-1.4907 1.6637-2.8271 1.6637-1.0074 0-1.7752-0.39771-2.3039-1.1924zm15.135-10.957c-1.1519 0.68191-2.0421 1.6533-2.6706 2.9146-0.62816 1.2609-0.9422 2.6912-0.9422 4.2908v0.4121c0 2.3849 0.74524 4.2935 2.2363 5.7265 1.4911 1.4326 3.4232 2.1491 5.7968 2.1491 1.3467 0 2.5732-0.25255 3.6803-0.75818 1.107-0.50548 1.9847-1.2096 2.6329-2.1124l-2.1243-2.3406c-0.93746 1.1878-2.2391 1.7814-3.9045 1.7814-1.077 0-1.967-0.31413-2.6702-0.9423-0.70323-0.62818-1.1245-1.4622-1.264-2.5025h10.307v-1.7369c0-2.522-0.63566-4.4703-1.9076-5.844-1.2712-1.3739-3.0143-2.0609-5.228-2.0609-1.4765 0-2.7903 0.34103-3.942 1.0232zm1.8399 3.2754c0.53358-0.56939 1.2293-0.8539 2.0871-0.8539 0.91764 0 1.6256 0.25768 2.124 0.77258 0.49884 0.5152 0.75817 1.2438 0.77799 2.1861v0.33862h-6.0138c0.14952-1.0599 0.49126-1.8744 1.0248-2.4434zm-35.613-3.1823c-1.162 0.67709-2.0519 1.6338-2.6705 2.8702-0.61821 1.2368-0.92713 2.6449-0.92713 4.2249v0.19151c0 2.5317 0.69534 4.5336 2.0867 6.0059 1.3911 1.4719 3.2539 2.2079 5.5875 2.2079 2.3337 0 4.1937-0.73836 5.58-2.2152 1.3862-1.477 2.0793-3.4374 2.0793-5.881l-0.02969-1.0893c-0.15978-2.2569-0.93026-4.0429-2.3115-5.358-1.3811-1.3151-3.1637-1.9727-5.3481-1.9727-1.5358 0-2.8845 0.33854-4.0466 1.0158zm1.5932 10.871c-0.57834-0.80016-0.86736-1.9556-0.86736-3.4668 0-1.6977 0.28902-2.9516 0.86736-3.7608 0.57819-0.80996 1.3962-1.2146 2.4534-1.2146 1.0671 0 1.8949 0.40713 2.4834 1.2216 0.5886 0.81456 0.88244 1.9628 0.88244 3.4447 0 1.737-0.29384 3.0006-0.88244 3.7904-0.58852 0.78999-1.4065 1.1851-2.4534 1.1851-1.077 0-1.9052-0.39982-2.4834-1.1995zm-19.418-9.6935c-1.3266 1.4623-1.9899 3.4199-1.9899 5.8737v0.27938c0 2.5516 0.66841 4.5512 2.0048 5.9986 1.3365 1.4474 3.1615 2.1713 5.4752 2.1713 1.2367 0 2.366-0.24795 3.3884-0.74334 1.0223-0.49583 1.8277-1.1925 2.4158-2.0904 0.58852-0.89784 0.88756-1.8866 0.89782-2.966h-4.0541c-0.020202 0.7162-0.2793 1.2906-0.77799 1.7223-0.49876 0.43162-1.147 0.64762-1.9448 0.64762-1.0374 0-1.8103-0.35814-2.3189-1.0746-0.50863-0.71643-0.76299-1.8938-0.76299-3.5327v-0.44165c0-1.6194 0.25711-2.7897 0.77049-3.5109 0.51376-0.72118 1.274-1.0819 2.2814-1.0819 0.81785 0 1.476 0.2576 1.9748 0.7728 0.49869 0.51505 0.75778 1.1851 0.77799 2.0095h4.0541c-0.020125-1.8845-0.64078-3.3929-1.8625-4.5266-1.2217-1.1334-2.8449-1.7003-4.8695-1.7003-2.3138 0-4.134 0.7312-5.4601 2.1934z"
			></path>
			<path
			id="a"
			d="m17.431 0.034518v3.916h-2.3636v3.1205h2.3636v8.582c0.05961 3.0128 1.6054 4.5189 4.6375 4.5189 0.89751 0 1.7699-0.12729 2.6179-0.38256v-3.2237c-0.36898 0.068583-0.79306 0.10318-1.2715 0.10318-0.64828 0-1.0869-0.12767-1.3163-0.38301-0.22972-0.25489-0.34442-0.67671-0.34442-1.2655v-7.9492h2.7678v-3.1205h-2.7678v-3.916h-4.323zm66.155 6.0503c-0.77799-1.6194-2.209-2.429-4.2934-2.429-1.9549 0-3.5058 0.69201-4.6525 2.0757l-0.13483-1.781h-4.0541v15.927h4.3236v-11.261c0.5485-1.0009 1.4361-1.5015 2.6626-1.5015 0.88787 0 1.516 0.20628 1.8849 0.61845 0.36906 0.4121 0.55386 1.0795 0.55386 2.0019v10.142h4.3232l-0.014922-10.937c0.49884-1.2167 1.3961-1.8254 2.6927-1.8254 0.90761 0 1.5409 0.20869 1.8998 0.62576 0.35904 0.41693 0.53855 1.0769 0.53855 1.9799v10.157h4.3384v-10.172c0-2.0215-0.42875-3.5353-1.2865-4.5411-0.85749-1.0061-2.1643-1.5089-3.9196-1.5089-2.1042 0-3.725 0.80958-4.8617 2.429zm-26.013-1.759c-1.0574 0.44639-1.8751 1.0624-2.4536 1.8474-0.5785 0.78501-0.86767 1.6388-0.86767 2.5612h4.3233c0-0.59878 0.20691-1.0695 0.62097-1.4131 0.41375-0.34367 0.9849-0.5152 1.713-0.5152 0.82742 0 1.4335 0.2206 1.8174 0.66232s0.57574 1.0306 0.57574 1.7665v0.91261h-1.9893c-2.4036 0.0097976-4.2412 0.46629-5.5129 1.3688-1.2715 0.90296-1.9074 2.1986-1.9074 3.8865 0 1.3738 0.52118 2.5122 1.5635 3.4151 1.0421 0.90289 2.3561 1.354 3.9417 1.354 1.6755 0 3.0371-0.57369 4.0841-1.7217 0.089759 0.56894 0.23461 1.0449 0.43387 1.4275h4.3681v-0.25022c-0.4188-0.77529-0.63313-1.9187-0.64316-3.4299v-6.9038c0-1.786-0.586-3.1723-1.7577-4.1585-1.1718-0.98616-2.7551-1.4794-4.7498-1.4794-1.3166 0-2.5031 0.22346-3.5603 0.66993zm1.2118 12.078c-0.37893-0.34359-0.56878-0.78034-0.56878-1.31l0.015075-0.25022c0.13965-1.4723 1.2914-2.2082 3.4556-2.2082h1.6156v2.7379c-0.25933 0.47126-0.65815 0.84644-1.1967 1.1262-0.53832 0.27946-1.1269 0.41956-1.7651 0.41956-0.65823 0-1.1767-0.17161-1.5557-0.51528zm-17.78-11.725c-1.1518 0.68229-2.042 1.6536-2.6701 2.915-0.62854 1.2609-0.94258 2.6912-0.94258 4.2907v0.41218c0 2.3849 0.74554 4.2935 2.2367 5.7265 1.4907 1.4326 3.4231 2.1488 5.7968 2.1488 1.3462 0 2.5732-0.25225 3.6801-0.75781 1.107-0.50556 1.9848-1.2095 2.6331-2.1124l-2.1243-2.3406c-0.93753 1.1875-2.2391 1.7814-3.9046 1.7814-1.077 0-1.9673-0.3142-2.6705-0.9423-0.703-0.62818-1.1245-1.4622-1.2642-2.5025h10.308v-1.7369c0-2.522-0.63596-4.4703-1.9076-5.844-1.2712-1.3739-3.0142-2.0609-5.2284-2.0609-1.476 0-2.7899 0.34103-3.942 1.0229zm1.8403 3.2754c0.53358-0.56901 1.2292-0.85352 2.0866-0.85352 0.91764 0 1.6257 0.25768 2.1243 0.77258 0.49892 0.5152 0.75824 1.2438 0.77806 2.1861v0.33854h-6.0138c0.14952-1.0598 0.49126-1.8744 1.0248-2.4437zm-11.352-2.105l-0.11983-1.8985h-4.0841v15.927h4.3233v-10.422c0.50871-1.0894 1.5809-1.6339 3.2167-1.6339 0.44856 0 0.96722 0.039266 1.5556 0.11795l0.059839-4.0924c-0.41895-0.12759-0.86744-0.19151-1.3463-0.19151-1.5358 0-2.7375 0.73135-3.6053 2.1932zm-29.194-0.77265c-1.1917 0.94697-1.7878 2.1273-1.7878 3.5401 0 2.4242 1.925 4.0335 5.7746 4.8286 1.1568 0.23552 1.9972 0.50292 2.5211 0.8022 0.52317 0.2992 0.78503 0.70904 0.78503 1.2291 0 0.50051-0.21196 0.90522-0.6355 1.2143-0.424 0.30938-1.0498 0.46388-1.8775 0.46388-0.88764 0-1.596-0.20123-2.1244-0.60361-0.52838-0.40245-0.8128-0.98119-0.85267-1.737h-4.0988c0 0.96175 0.29904 1.8572 0.89751 2.6866 0.59847 0.8294 1.4234 1.4821 2.4758 1.9576 1.0521 0.47601 2.2561 0.71379 3.6126 0.71379 2.0049 0 3.6404-0.44873 4.9068-1.3466 1.2666-0.89791 1.8998-2.0732 1.8998-3.5256 0-2.0312-1.1415-3.4592-3.4255-4.2834-0.7382-0.26506-1.6457-0.50322-2.7228-0.71417-1.077-0.21087-1.8423-0.46116-2.2962-0.7508-0.45377-0.28956-0.68042-0.6697-0.68042-1.1407 0-0.50051 0.19941-0.91268 0.59816-1.2365 0.39898-0.32415 0.96255-0.48604 1.6903-0.48604 0.848 0 1.4713 0.19882 1.8701 0.59622 0.39898 0.39763 0.59832 0.90047 0.59832 1.5089h4.3234c0-1.521-0.61592-2.7574-1.8474-3.7095-1.2316-0.95187-2.8747-1.4279-4.9293-1.4279-1.925 0-3.4834 0.47368-4.675 1.4206z"
			></path>
		</defs>
		<g transform="translate(-110 -40)" fill="none" fill-rule="evenodd">
			<g transform="translate(110 40)">
			<g transform="translate(10.713 9.873)">
				<mask id="i" fill="white"><use xlink:href="#e"></use></mask>
				<polygon
				points="-0.31986 9.9755 10.162 9.9755 10.162 -0.35294 -0.31986 -0.35294"
				fill="#fff"
				mask="url(#i)"
				></polygon>
			</g>
			<g transform="translate(17.523 .30146)">
				<mask id="h" fill="white"><use xlink:href="#d"></use></mask>
				<polygon
				points="-0.36378 29.202 14.139 29.202 14.139 -0.32392 -0.36378 -0.32392"
				fill="#009AEF"
				mask="url(#h)"
				></polygon>
			</g>
			<g transform="translate(0 .30146)">
				<mask id="g" fill="white"><use xlink:href="#c"></use></mask>
				<polygon
				points="-0.38161 29.202 14.122 29.202 14.122 -0.32407 -0.38161 -0.32407"
				fill="#009AEF"
				mask="url(#g)"
				></polygon>
			</g>
			<g transform="translate(37.572)">
				<mask id="f" fill="white"><use xlink:href="#b"></use></mask>
				<polygon
				points="-0.30631 23.287 65.124 23.287 65.124 -0.37125 -0.30631 -0.37125"
				fill="#fff"
				mask="url(#f)"
				></polygon>
			</g>
			<g transform="translate(103.84 2.6378)">
				<mask id="j" fill="white"><use xlink:href="#a"></use></mask>
				<polygon
				points="-0.38 20.549 94.036 20.549 94.036 -0.34224 -0.38 -0.34224"
				fill="#009AEF"
				mask="url(#j)"
				></polygon>
			</g>
			</g>
		</g>
		</svg>
		<span class="plus">+</span>
		<svg
		width="885px"
		height="272px"
		viewBox="0 0 885 272"
		version="1.1"
		xmlns="http://www.w3.org/2000/svg"
		xmlns:xlink="http://www.w3.org/1999/xlink"
		class="trello-logo"
		>
		<!--
			Generator: Sketch 41 (35326) - http://www.bohemiancoding.com/sketch
		-->
		<title>Trello Logo</title>
		<defs>
			<linearGradient
			x1="50%"
			y1="0%"
			x2="50%"
			y2="100%"
			id="linearGradient-1"
			>
			<stop stop-color="#0079BF" offset="0%"></stop>
			<stop stop-color="#0079BF" offset="100%"></stop>
			</linearGradient>
		</defs>
		<g
			id="Page-1"
			stroke="none"
			stroke-width="1"
			fill="none"
			fill-rule="evenodd"
		>
			<g id="Logos" transform="translate(-509.000000, -485.000000)">
			<g id="Group" transform="translate(-9.000000, 1.000000)">
				<g id="Trello-Logo" transform="translate(468.000000, 0.000000)">
				<g
					id="Trello-Logo---Blue---Flat"
					transform="translate(0.000000, 420.000000)"
				>
					<g id="Logo" transform="translate(50.000000, 64.000000)">
					<g transform="translate(50.000000, 1.000000)">
						<path
						d="M673.29354,177.589525 C660.522868,182.793147 650.445278,200.770881 635.1184,210.9888 C634.168,211.6224 633.2176,211.9392 632.584,211.9392 C631.3168,211.9392 629.7328,210.672 629.7328,204.9696 C629.7328,185.328 636.0688,175.824 641.4544,161.8848 C660.1456,113.4144 692.1424,71.9136 720.6544,26.6112 C722.872,23.1264 724.1392,19.3248 724.1392,15.2064 C724.1392,11.7216 722.872,8.8704 721.288,5.3856 C720.0208,2.5344 714.3184,0 707.9824,0 C704.4976,0 701.3296,0.3168 697.2112,0.3168 C682.3216,0.3168 679.1536,22.176 675.6688,27.8784 C651.9088,68.112 624.664,117.8496 610.7248,153.0144 C607.668102,160.897464 604.366309,168.780528 601.85663,176.871034 C588.081883,180.859826 577.762454,200.227697 561.6208,210.9888 C560.6704,211.6224 559.72,211.9392 559.0864,211.9392 C557.8192,211.9392 556.2352,210.672 556.2352,204.9696 C556.2352,185.328 562.5712,175.824 567.9568,161.8848 C586.648,113.4144 618.6448,71.9136 647.1568,26.6112 C649.3744,23.1264 650.6416,19.3248 650.6416,15.2064 C650.6416,11.7216 649.3744,8.8704 647.7904,5.3856 C646.5232,2.5344 640.8208,0 634.4848,0 C631,0 627.832,0.3168 623.7136,0.3168 C608.824,0.3168 605.656,22.176 602.1712,27.8784 C578.4112,68.112 551.1664,117.8496 537.2272,153.0144 C536.119038,155.872292 534.978662,158.730185 533.855495,161.597962 C533.508659,161.783218 533.154477,161.984114 532.792,162.2016 C516.6352,171.7056 503.0128,188.496 483.3712,199.9008 C479.5696,202.1184 467.848,210.3552 458.344,210.3552 C456.1264,210.3552 454.2256,209.7216 452.3248,208.7712 C449.4736,207.504 446.6224,201.4848 446.6224,199.584 C446.6224,198 446.9392,197.6832 450.1072,195.7824 C477.9856,178.992 500.7952,154.9152 520.4368,130.8384 C527.7232,121.968 537.2272,104.544 537.2272,91.872 C537.2272,83.6352 534.376,74.1312 524.5552,70.6464 C517.5856,68.112 509.6656,66.8448 503.3296,66.8448 C486.5392,66.8448 474.184,74.448 467.2144,81.7344 C460.118962,89.3092596 453.25569,97.087265 446.87931,105.138685 C440.217004,99.3868496 430.819897,96.9408 421.912,96.9408 C411.4576,96.9408 391.816,109.9296 381.6784,117.5328 C380.0944,118.8 379.144,119.4336 378.5104,119.4336 C378.1936,119.4336 377.8768,119.1168 377.8768,118.4832 C377.8768,118.1664 378.5104,115.3152 378.5104,110.2464 C378.5104,105.8112 377.56,100.1088 373.4416,93.1392 C372.4912,91.5552 366.7888,88.0704 359.8192,88.0704 C351.2656,88.0704 343.3456,92.1888 343.3456,96.624 C343.3456,99.792 346.1968,101.0592 346.1968,103.9104 C346.1968,105.4944 344.9296,112.7808 343.0288,119.7504 C337.6432,140.0256 330.9904,159.984 324.0208,179.9424 C320.2192,191.0304 307.5472,200.8512 307.5472,212.8896 C307.5472,216.6912 310.0816,221.76 313.5664,225.5616 C319.2688,231.8976 322.7536,234.1152 327.8224,234.1152 C330.04,234.1152 332.5744,233.4816 334.792,231.5808 C339.544,227.4624 342.0784,223.344 343.3456,217.6416 C351.5824,180.2592 375.3424,154.9152 401.6368,138.1248 C410.5072,132.4224 422.5456,126.4032 424.1296,126.4032 C425.753839,126.4032 428.294103,127.152675 430.853793,127.883111 C423.503522,139.871969 417.547939,152.515386 413.6752,166.0032 C412.408,170.4384 411.7744,174.5568 411.7744,178.992 C411.7744,186.2784 413.3584,193.8816 415.8928,201.168 C419.3776,211.3056 425.08,220.176 433,224.2944 C447.5728,231.8976 458.0272,236.016 467.5312,236.016 C472.9168,236.016 477.0352,235.0656 481.4704,232.5312 C502.292673,220.750177 515.058884,211.81247 524.277157,203.873846 C524.529918,211.922923 526.116566,216.382314 531.8416,222.3936 C537.544,228.4128 546.4144,233.7984 558.136,236.3328 C560.0368,236.6496 561.9376,236.9664 563.8384,236.9664 C577.249499,236.9664 590.155947,226.065941 600.108075,215.260049 C601.260342,217.618088 602.9348,219.86898 605.3392,222.3936 C611.0416,228.4128 619.912,233.7984 631.6336,236.3328 C633.5344,236.6496 635.4352,236.9664 637.336,236.9664 C653.045767,236.9664 668.063062,222.00902 678.45036,209.767345 C681.912282,216.927848 691.586543,224.007351 703.2304,229.68 C706.3984,231.264 710.2,232.2144 713.6848,232.2144 C727.3072,232.2144 737.128,221.1264 744.7312,212.8896 C764.3728,191.3472 775.144,164.736 783.3808,131.1552 C784.0144,128.6208 784.9648,127.6704 786.232,127.6704 C789.4,127.6704 793.5184,127.6704 797.9536,127.0368 C806.5072,125.7696 813.16,122.9184 821.08,121.6512 C825.832,120.7008 825.1984,119.1168 829.6336,117.5328 C832.8016,116.2656 835.336,114.9984 835.336,111.8304 C835.336,106.4448 825.5152,100.7424 810.6256,100.7424 C798.904,100.7424 791.9344,101.6928 787.1824,101.6928 C779.896,101.6928 777.9952,99.4752 773.2432,87.12 C773.2432,87.12 777.9952,99.4752 773.2432,87.12 C772.2928,84.5856 771.3424,83.3184 768.4912,80.784 C761.8384,75.0816 753.6016,73.1808 746.9488,73.1808 C731.1088,73.1808 717.4864,89.3376 707.9824,102.96 C705.7648,106.128 702.5968,108.6624 700.3792,112.1472 C687.329185,131.722222 674.834513,153.79629 673.29354,177.589525 Z M268.264,69.696 C276.184,69.696 280.6192,69.0624 281.5696,69.0624 C282.52,69.0624 283.1536,69.3792 283.1536,70.3296 C283.1536,70.9632 282.8368,71.9136 280.6192,76.6656 C261.2944,118.1664 247.9888,160.3008 236.2672,206.8704 C235.9504,208.1376 235,212.8896 235,217.6416 C235,222.0768 236.2672,226.8288 240.7024,229.3632 C249.256,234.432 256.2256,236.6496 260.9776,236.6496 C267.9472,236.6496 271.432,232.2144 271.432,224.928 C271.432,218.592 271.7488,211.9392 272.6992,206.8704 C281.5696,160.3008 294.8752,123.8688 315.4672,85.8528 C325.288,67.7952 326.5552,66.8448 326.5552,65.2608 C326.5552,64.6272 326.2384,63.6768 325.6048,62.7264 C338.2768,59.8752 353.4832,57.9744 367.4224,57.9744 C369.0064,57.9744 375.3424,60.192 376.2928,61.1424 C378.5104,63.36 380.728,65.5776 384.5296,65.5776 C387.6976,65.5776 393.0832,63.36 394.984,62.0928 C399.4192,58.9248 401.6368,55.44 401.6368,49.7376 C401.6368,44.352 381.6784,31.0464 367.7392,31.0464 C350.632,31.0464 335.1088,33.264 320.536,36.1152 C314.2,37.3824 291.3904,40.8672 274.9168,40.8672 C259.0768,40.8672 260.0272,38.6496 253.3744,38.6496 C249.5728,38.6496 247.672,40.5504 246.088,42.1344 C244.504,43.7184 243.5536,50.0544 243.5536,55.7568 C243.5536,58.608 243.5536,60.8256 245.1376,62.7264 C249.8896,68.4288 259.0768,69.696 268.264,69.696 C268.264,69.696 259.0768,69.696 268.264,69.696 Z M503.0128,95.3568 C503.0128,98.208 502.0624,100.1088 498.2608,106.128 C494.4592,112.1472 496.0432,112.1472 491.2912,118.4832 C482.104,130.8384 470.6992,143.1936 455.8096,156.816 C451.6912,160.6176 451.0576,160.6176 450.424,160.6176 C450.1072,160.6176 449.4736,160.3008 449.4736,159.6672 C449.4736,158.7168 449.7904,157.4496 452.9584,150.7968 C462.7792,130.2048 474.8176,116.5824 488.1232,103.2768 C495.4096,95.9904 499.8448,93.456 501.4288,93.456 C502.3792,93.456 503.0128,93.7728 503.0128,95.3568 C503.0128,95.3568 503.0128,93.7728 503.0128,95.3568 Z M746.632,103.5936 C746.9488,103.5936 747.2656,103.9104 747.5824,104.544 C747.8992,105.4944 748.5328,106.4448 750.1168,107.712 C751.384,108.6624 751.384,113.0976 751.384,116.5824 C751.384,147.312 733.96,172.656 716.8528,198.3168 C713.0512,204.0192 710.8336,204.9696 708.9328,204.9696 C707.3488,204.9696 704.8144,200.8512 703.864,198.3168 C702.5968,194.832 702.28,190.7136 702.28,189.1296 C702.28,164.4192 725.7232,127.6704 741.2464,107.3952 C743.7808,103.9104 745.6816,103.5936 746.632,103.5936 C746.632,103.5936 745.6816,103.5936 746.632,103.5936 Z"
						id="Type"
						fill="#0079BF"
						></path>
						<g id="Mark" transform="translate(0.000000, 35.000000)">
						<rect
							id="Board"
							fill="url(#linearGradient-1)"
							x="0"
							y="0"
							width="200"
							height="200"
							rx="25"
						></rect>
						<rect
							id="Right-List"
							fill="#FFFFFF"
							x="113"
							y="26"
							width="61"
							height="87.5"
							rx="12"
						></rect>
						<rect
							id="Left-List"
							fill="#FFFFFF"
							x="26"
							y="26"
							width="61"
							height="137.5"
							rx="12"
						></rect>
						</g>
					</g>
					</g>
				</g>
				</g>
			</g>
			</g>
		</g>
		</svg>
		<span class="equals">=</span> <span class="rocket">🚀</span>
	</h1>
	<p>
		Your CodeStream account is now connected to Trello. Return to your IDE
		to create your first card, or watch the video below to learn how to get
		the most out of this integration.
	</p>
	</div>
	<div class="youtube">
	<iframe
		width="560"
		height="315"
		src="https://www.youtube.com/embed/AkDmw7kLAto"
		frameborder="0"
		allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
		allowfullscreen
	></iframe>
	</div>
</body>
</html>		
`
		);
		this.responseHandled = true;
	}

	// after a response is returned....
	async postProcess () {
		if (!this.user) { return; }
		await this.publishUserToSelf();
	}

	// publish updated user to themselves, to propagate the new token
	async publishUserToSelf () {
		const data = {
			user: Object.assign(
				{
					id: this.user.id
				},
				this.transforms.userUpdate
			),
			requestId: this.request.id
		};
		const channel = `user-${this.user.id}`;
		try {
			await this.api.services.messager.publish(
				data,
				channel,
				{ request: this }
			);
		}
		catch (error) {
			// this doesn't break the chain, but it is unfortunate...
			this.warn(`Could not publish user update to user ${this.user.id}: ${JSON.stringify(error)}`);
		}
	}

	// describe this route for help
	static describe () {
		return {
			tag: 'provider-token',
			summary: 'Completes the authorization of a third-party provider by storing the resulting token',
			access: 'No authorization needed, authorization is handled by looking at the provided state object',
			description: 'Once third-party authorization is complete, call this request to store the token retrieved by auth against the third-party provider',
			input: {
				summary: 'Specify parmaeters in the query',
				looksLike: {
					'state*': '<State token generate by call to provider-auth>',
					'token': '<Third-party auth token, if not provided, a short script will be returned to retrieve it from the document fragment>'
				}
			},
			returns: 'html text to display when the authorization process is complete',
			publishes: 'directive to update the user object with the appropriate token',
			errors: [
				'parameterRequired',
				'tokenExpired',
				'tokenInvalid',
				'notFound',
				'updateAuth'
			]
		};
	}
}

module.exports = ProviderTokenRequest;
