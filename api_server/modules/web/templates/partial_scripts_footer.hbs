<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-timeago/1.6.7/jquery.timeago.min.js" integrity="sha256-0+5OfvOxkLHqpLPPwy9pDjug8N3cwaqcmleaxnR5VS8=" crossorigin="anonymous"></script>
<script>
		(function (f) { if (typeof exports === "object" && typeof module !== "undefined") { module.exports = f() } else if (typeof define === "function" && define.amd) { define([], f) } else { var g; if (typeof window !== "undefined") { g = window } else if (typeof global !== "undefined") { g = global } else if (typeof self !== "undefined") { g = self } else { g = this } g.protocolCheck = f() } })(function () {
			var define, module, exports; return (function e(t, n, r) { function s(o, u) { if (!n[o]) { if (!t[o]) { var a = typeof require == "function" && require; if (!u && a) return a(o, !0); if (i) return i(o, !0); var f = new Error("Cannot find module '" + o + "'"); throw f.code = "MODULE_NOT_FOUND", f } var l = n[o] = { exports: {} }; t[o][0].call(l.exports, function (e) { var n = t[o][1][e]; return s(n ? n : e) }, l, l.exports, e, t, n, r) } return n[o].exports } var i = typeof require == "function" && require; for (var o = 0; o < r.length; o++)s(r[o]); return s })({
				1: [function (require, module, exports) {
					function _registerEvent(target, eventType, cb) {
						if (target.addEventListener) {
							target.addEventListener(eventType, cb);
							return {
								remove: function () {
									target.removeEventListener(eventType, cb);
								}
							};
						} else {
							target.attachEvent(eventType, cb);
							return {
								remove: function () {
									target.detachEvent(eventType, cb);
								}
							};
						}
					}

					function _createHiddenIframe(target, uri) {
						var iframe = document.createElement("iframe");
						iframe.src = uri;
						iframe.id = "hiddenIframe";
						iframe.style.display = "none";
						target.appendChild(iframe);

						return iframe;
					}

					function _createDetachedHiddenIframe() {
						var iframe = document.createElement("iframe");
						iframe.id = "hiddenDetachedIframe";
						iframe.style.display = "none";
						return iframe;
					}

					function openUriWithHiddenFrame(uri, failCb, successCb) {

						var timeout = setTimeout(function () {
							failCb();
							handler.remove();
						}, 1000);

						var iframe = document.querySelector("#hiddenIframe");
						if (!iframe) {
							iframe = _createHiddenIframe(document.body, "about:blank");
						}

						var handler = _registerEvent(window, "blur", onBlur);

						function onBlur() {
							clearTimeout(timeout);
							handler.remove();
							successCb();
						}

						iframe.contentWindow.location.href = uri;
					}

					function openUriWithTimeoutHack(uri, failCb, successCb) {

						var timeout = setTimeout(function () {
							failCb();
							handler.remove();
						}, 1000);

						//handle page running in an iframe (blur must be registered with top level window)
						var target = window;
						while (target != target.parent) {
							target = target.parent;
						}

						var handler = _registerEvent(target, "blur", onBlur);

						function onBlur() {
							clearTimeout(timeout);
							handler.remove();
							successCb();
						}

						window.location = uri;
					}

					function openUriUsingFirefox(uri, failCb, successCb) {						
						openUriWithTimeoutHack(uri, failCb, successCb);
						//openUriUsingIE10InWindows7(uri, failCb, successCb);
						//openUriUsingWickedInsaneHackery(uri, failCb, successCb);
						/*
						return;
						var iframe = document.querySelector("#hiddenIframe");

						if (!iframe) {
							iframe = _createHiddenIframe(document.body, "about:blank");
						}

						try {
							iframe.contentWindow.location.href = uri;
							successCb();
						} catch (e) {
							if (e.name == "NS_ERROR_UNKNOWN_PROTOCOL") {
								failCb();
							}
						}
						*/
					}
					

					function openUriUsingIEInOlderWindows(uri, failCb, successCb) {
						if (getInternetExplorerVersion() === 10) {
							openUriUsingIE10InWindows7(uri, failCb, successCb);
						} else if (getInternetExplorerVersion() === 9 || getInternetExplorerVersion() === 11) {
							openUriWithHiddenFrame(uri, failCb, successCb);
						} else {
							openUriInNewWindowHack(uri, failCb, successCb);
						}
					}

					function openUriUsingWickedInsaneHackery(uri, failCb, successCb) {
						var succeded = false;
 						var timeout;						

						var handler = function () {
								console.log('blurred -- success')
								window.removeEventListener("blur", handler);
								if (timeout) {
									clearTimeout(timeout);
								}
								succeded = true
								successCb();								
						};
						 
						var inner = function() {							
							if (timeout) {
								clearTimeout(timeout);
							}
							timeout = setTimeout(function() {
									window.removeEventListener("blur", handler);
									failCb();
							}, 5000);
							
							window.removeEventListener("blur", handler);
							window.addEventListener("blur", handler);
							
							var iframe = document.querySelector("#hiddenIframe");							
							
							if (!iframe) {
								iframe = _createHiddenIframe(document.body, "about:blank");								
							}							
							try {																
								iframe.contentWindow.location.href = uri;																
							} catch (e) {								
								window.removeEventListener("blur", handler);								
								failCb();
								clearTimeout(timeout);								
							}		
						}	
						var i = 0;
						var foo = function() {
							if (!succeded) {
								inner();
							}
							if (succeded) {
								clearInterval(poop);
								return;
							}
							i++;
							console.log(i);
						}
						var poop = setInterval(foo, 250);						 			
					}

					function openUriUsingIE10InWindows7(uri, failCb, successCb) {
						var timeout = setTimeout(function() {
							window.removeEventListener("blur", handler);
							failCb();
						}, 2000);
						
						var handler = function () {
							window.removeEventListener("blur", handler);
							clearTimeout(timeout);
							successCb();
						};
						window.addEventListener("blur", handler);

						var iframe = document.querySelector("#hiddenIframe");
						if (!iframe) {
							iframe = _createHiddenIframe(document.body, "about:blank");
						}
						try {
							iframe.contentWindow.location.href = uri;
						} catch (e) {
							window.removeEventListener("blur", handler);
							failCb();
							clearTimeout(timeout);
						}						 			
					}

					function openUriInNewWindowHack(uri, failCb, successCb) {
						var myWindow = window.open('', '', 'width=0,height=0');

						myWindow.document.write("<iframe src='" + uri + "'></iframe>");

						setTimeout(function () {
							try {
								myWindow.location.href;
								myWindow.setTimeout("window.close()", 1000);
								successCb();
							} catch (e) {
								myWindow.close();
								failCb();
							}
						}, 1000);
					}

					function openUriWithMsLaunchUri(uri, failCb, successCb) {
						navigator.msLaunchUri(uri,
							successCb,
							failCb
						);
					}

					function checkBrowser() {
						var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
						var ua = navigator.userAgent.toLowerCase();
						return {
							isOpera: isOpera,
							isFirefox: typeof InstallTrigger !== 'undefined',
							isSafari: (~ua.indexOf('safari') && !~ua.indexOf('chrome')) || Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0,
							isIOS: /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream,
							isChrome: !!window.chrome && !isOpera,
							isIE: /*@cc_on!@*/false || !!document.documentMode // At least IE6
						}
					}

					function getInternetExplorerVersion() {
						var rv = -1;
						if (navigator.appName === "Microsoft Internet Explorer") {
							var ua = navigator.userAgent;
							var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
							if (re.exec(ua) != null)
								rv = parseFloat(RegExp.$1);
						}
						else if (navigator.appName === "Netscape") {
							var ua = navigator.userAgent;
							var re = new RegExp("Trident/.*rv:([0-9]{1,}[\.0-9]{0,})");
							if (re.exec(ua) != null) {
								rv = parseFloat(RegExp.$1);
							}
						}
						return rv;
					}

					module.exports = function (uri, failCb, successCb, unsupportedCb) {
						function failCallback() {
							failCb && failCb();
						}

						function successCallback() {
							successCb && successCb();
						}

						if (navigator.msLaunchUri) { //for IE and Edge in Win 8 and Win 10
							openUriWithMsLaunchUri(uri, failCb, successCb);
						} else {
							var browser = checkBrowser();

							if (browser.isFirefox) {
								openUriUsingFirefox(uri, failCallback, successCallback);
							} else if (browser.isChrome || browser.isIOS) {
								openUriWithTimeoutHack(uri, failCallback, successCallback);
							} else if (browser.isIE) {
								openUriUsingIEInOlderWindows(uri, failCallback, successCallback);
							} else if (browser.isSafari) {
								openUriWithHiddenFrame(uri, failCallback, successCallback);
							} else {
								unsupportedCb();
								//not supported, implement please
							}
						}
					}

				}, {}]
			}, {}, [1])(1)
		});
	</script>
	<script>
	window.CODESTREAM = {} || window.CODESTREAM;
			
	function getCookie(cname) {
		var name = cname + "=";
		var decodedCookie = decodeURIComponent(document.cookie);
		var ca = decodedCookie.split(';');
		for (var i = 0; i < ca.length; i++) {
			var c = ca[i];
			while (c.charAt(0) == ' ') {
				c = c.substring(1);
			}
			if (c.indexOf(name) == 0) {
				return c.substring(name.length, c.length);
			}
		}
		return "";
	}

	function setCookie(cname, cvalue, exdays) {
		var d = new Date();
		d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
		var expires = "expires=" + d.toUTCString();
		document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
	}

	function createBanner(ide, protocol, downloadUrl) {
		var $existingAlert = $('.alert');
		if ($existingAlert.length) {
			$existingAlert.alert('close');
		}
		var message = `Launching ${ide}... If nothing happens, download the <a href='${downloadUrl}'>CodeStream</a> extension for ${ide} and`;

		if (protocol.indexOf('jetbrains') > -1) {
			message += ' the <a href="https://www.jetbrains.com/toolbox/app/" target="_blank">Jetbrains Toolbox App</a> and';
		}
		message += ' try again';

		var $alert = $(`<div class="alert alert-warning alert-dismissible fade show text-center" role="alert">
			<span class="alert-text">
				${message}
			</span>
			<button type = "button" class="close" data-dismiss="alert" aria-label="Close" >
				<span aria-hidden="true">&times;</span>
			</button >
		</div>`);
		$('#alert-wrapper').append($alert);
		$alert.show();
	}

	function createInstallBanner() {
		var text = 'Ensure the <a href="https://www.codestream.com/roadmap" target="_blank">CodeStream extension</a> for your IDE is installed. Jetbrains users also need the <a href="https://www.jetbrains.com/toolbox/app/" target="_blank">Jetbrains Toolbox App</a>. ';	
		if (!$('.alert').length) {
			createMessage(text);
			$('#alert-wrapper').append($alert);										
		}
		else {
			// already a banner there? append the text
			var innerHtml = $('.alert .alert-text').html();
			$('.alert .alert-text').html(innerHtml + '<br>' + text);				 
		}
	}

	function createMessage(message) {
		var $existingAlert = $('.alert');
		if ($existingAlert.length) {
			$existingAlert.alert('close');
		}

		var $alert = $(`<div class="alert alert-info alert-dismissible fade show text-center" role="alert">
				<span class="alert-text">
				${message}
				</span>
				<button type = "button" class="close" data-dismiss="alert" aria-label="Close" >
					<span aria-hidden="true">&times;</span>
				</button >
			</div>`);
		$('#alert-wrapper').append($alert);
		$alert.show();
	}	

	function setSelectedFromCookie(){
		var mru = getCookie("cs__ide-mru--{{repoId}}");
		var found = false;
		if (mru) {
			var u = $('[data-element-ide-list]').find('[data-ide-moniker="' + mru + '"]');
			if (u && u.length) {
				window.CODESTREAM.setSelected(u);					
				found = true;
			}			 
		}
		 
		if (!found) {
			var a = $('[data-element-ide-list]').find('a');
			if (a && a.length) {
				window.CODESTREAM.setSelected(a);
			}
		}
		return mru;
	}

	window.CODESTREAM.openEditor = function(e, $el, type, options) {				
		e.preventDefault();
		options = (options || {});
	
		if (type === 'codemark') {
			if (!options.id) {
				console.error('missing codemarkId');
				return;		
			}	
		}	
		else if (type === 'review')	{
			if (!options.id) {
				console.error('missing review id');
				return;
			}
		}

		var protocolStart = $el.attr('data-ide-protocol');
		var ideName = $el.attr('data-ide-name');
		var moniker = $el.attr('data-ide-moniker');
		var downloadUrl = $el.attr('data-ide-download-url');
		var repoId; 
		var protocol;
		var route;
		if (type === 'codemark') {									
			route = { controller: 'codemark', action: 'open', id: options.id, 
						query: [
							{ key: 'repoId', value: $el.attr('data-repo-id')},
							{ key: 'marker', value: options.markerId},
						] 
				};
		}
		else if (type ==='review') {			
			route = { controller: 'review', action: 'open', id: options.id, query: [] }
		}
		else if (type === 'navigate') {
			if (options.action === 'search') {
				// special handler for search
				route = { controller: 'search', action: 'open', query: [ { key: 'q', value: options.q } ]}
			}
			else {
				route = { controller: 'navigate', action: options.action, query: [ { key: 'q', value: options.q } ]}
			}
		}
		else {
			console.error(`unknown type=${type}`);
			return;
		}

		if (moniker.indexOf('jb-') === 0) {
			if(route && route.query) {
				route.query.push({key: 'controller', value: route.controller});
				if (route.action) {
					route.query.push({key: 'action', value: route.action});
				}
				if (route.id) {
					route.query.push({key: 'id', value: route.id});
				}
				// var fileName = '{{rawFileName}}';
				// route.query.push({key:'file', value: encodeURIComponent(fileName)  });
			}
		}
		if (route) {
			protocol = `${protocolStart}${route.controller}`;
			if (route.id) {
				protocol += `/${route.id}`
			}
			if (route.action) {
				protocol += `/${route.action}`
			}
			if (route.query && route.query.length) {				
				protocol+='?1=1&';
				var len = route.query.length;
				for (var i = 0; i < len; i++) {
					var query = route.query[i];
					protocol+=`${query.key}=${query.value}`;
					if (i + 1 < len) {
						protocol+=`&`;
					}
				}
			}
		}
		else {
			console.warn('no route');
			return;
		}	 
		console.log(protocol);

		window.CODESTREAM.setSelected($el);		 

		var $existingAlert = $('.alert');
		if ($existingAlert.length) {
			$existingAlert.alert('close');
		}

		var timeout = setTimeout(function () {
			createBanner(ideName, protocolStart, downloadUrl);
		}, 1000);
		var startTime = new Date();
		// set the cookie inside both of the callbacks -- in the case of firefox, neither will get hit, but 
		// rather, will throw an exception that is un-recoverable (so we don't want to set the cookie in that case)
		window.protocolCheck(protocol,
			function () {
				//fail					
				setCookie('cs__ide-mru--{{repoId}}', moniker);
				window.analytics.track("Opened in IDE", { IDE: moniker, "Protocol Handled": false });
				console.log(`CodeStream: failed in ${(new Date() - startTime)/1000}s for Moniker=${moniker} Path=${protocol}`);
			}, function () {
				//success					
				clearTimeout(timeout);
				setCookie('cs__ide-mru--{{repoId}}', moniker);
				window.analytics.track("Opened in IDE", { IDE: moniker, "Protocol Handled": true });
				console.log(`CodeStream: success in ${(new Date() - startTime)/1000}s for Moniker=${moniker} Path=${protocol}`);
		});			
	}

	$(function() {
		$("time.timeago").timeago();
	}); 	 
</script>